import React from "react"; // üîπ Importa o React
import { useState, useEffect } from "react"; // üîπ Hooks para estado e efeito
import Formulario from "./Formulario"; // üîπ Importa o formul√°rio
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom"; // Aqui √© onde usaremos as rotas para separar as interfaces. npm install react-router-dom

import ComponenteCalculadoraSoma from "./ComponenteCalculadoraSoma";
import Historico from "./Historico"; // üîπ Importando a nova p√°gina

import ComponenteSimples from "./ComponenteSimples"; // Aqui ele "puxa" o export default do componente e possibilita ser usado, veja mais embaixo como ele √© usado.
import ComponenteComProps from "./ComponenteComProps"; // Outro componente para testes, aqui utilizamos o props para seu conhecimento.
import ComponenteComUseState from "./ComponenteComUseState"; // importa outro componente.

function App() {
  console.log("üöÄ App.jsx foi carregado!"); // üîπ Mensagem para verificar se o App carregou

  // üîπ Estado para armazenar a lista de usu√°rios
  const [usuarios, setUsuarios] = useState([]);

  // üîπ Busca os usu√°rios do backend quando o componente √© montado
  useEffect(() => {
    fetch("https://ribacki-react.onrender.com/usuarios") // üîπ Faz a requisi√ß√£o GET para listar os usu√°rios
      .then((res) => res.json()) // üîπ Converte a resposta para JSON
      .then((data) => setUsuarios(data)) // üîπ Atualiza o estado com os usu√°rios recebidos
      .catch((error) => console.error("Erro ao buscar usu√°rios:", error)); // üîπ Captura erros na requisi√ß√£o
  }, []); // üîπ O array vazio garante que a requisi√ß√£o acontece apenas uma vez (quando o componente monta)

  // üîπ Fun√ß√£o que adiciona um novo usu√°rio √† lista sem precisar recarregar a p√°gina
  function atualizarLista(usuario) {
    setUsuarios([...usuarios, usuario]);
  }

  function excluirUsuario(id) {
    fetch(`https://ribacki-react.onrender.com/usuarios/${id}`, { method: "DELETE" })
      .then((res) => res.json())
      .then(() => {
        setUsuarios(usuarios.filter((user) => user.id !== id)); // Atualiza a lista
      })
      .catch((error) => console.error("Erro ao excluir usu√°rio:", error));
  }

  return (
    <Router> {/* Define o escopo da navega√ß√£o pelas rotas do react */}
      <Routes> {/* Rotas da aplica√ß√£o */}
        {/* O Route define o link em que cada pagina er√° acessar e seu conteudo. */}
        {/* P√°gina principal */}
        <Route path="/" element={ 
          <div style={styles.container}>
            <div>

              <ComponenteSimples /> {/* O mesmo nome que esta no import no com√ßo do arquivo √© chamado aqui*/}
              <ComponenteComProps nome="Lucas" /> {/* Aqui passamos um parametro fixo para utilizar o props.*/}
              <ComponenteComUseState /> {/* Faz a importa√ß√£o normal do contador, sem ter ele em ciatado, toda l√≥gica ocorre no componente. */}
              <br />
              <h1>Cadastro de Usu√°rios</h1>
              <Formulario onUsuarioAdicionado={atualizarLista} /> {/* üîπ Chama o formul√°rio e passa a fun√ß√£o como prop */}
              <h2>Lista de Usu√°rios</h2>
              <ul>
                {usuarios.map((user) => (
                  <li key={user.id}>
                    {user.nome} - {user.email}
                    <button onClick={() => excluirUsuario(user.id)}>‚ùå Excluir</button>
                  </li>
                ))}
              </ul>
            </div>
            {/* O Link √© a ponte para a troca das rotas, ele √© igual ao link_to, indicando a rota e consequentemente o elemento. */}
            <Link to="/calculadora"> 
              <button style={styles.button}>Acessar Calculadora</button>
            </Link>
          </div>
        } />

        {/* üîπ P√°gina da Calculadora */}
        <Route path="/calculadora" element={<ComponenteCalculadoraSoma />} />
        
        {/* üîπ P√°gina do Hist√≥rico */}
        <Route path="/historico" element={<Historico />} />
      </Routes>
    </Router>
    
  );
}

  // üîπ Estilos simples
const styles = {
  container: {
    textAlign: "center",
    padding: "50px",
  },
  button: {
    marginTop: "20px",
    padding: "10px",
    fontSize: "18px",
    cursor: "pointer",
  },
};

export default App;
